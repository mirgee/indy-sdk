# TODO: Move reused steps to composite actions
name: indy-sdk-build

on:
  push:
    branches:
      # - master
      - "**"
  pull_request:
    branches:
      - "**"

env:
  RUST_VER: 1.45.2

jobs:
  workflow-setup:
    runs-on: ubuntu-latest
    outputs:
      CACHE_KEY_POOL: ${{ steps.mainstep.outputs.CACHE_KEY_POOL }}
      CACHE_KEY_LIBINDY: ${{ steps.mainstep.outputs.CACHE_KEY_LIBINDY }}
      CACHE_KEY_ANDROID: ${{ steps.mainstep.outputs.CACHE_KEY_ANDROID }}
      CACHE_KEY_WRAPPER_BASE: ${{ steps.mainstep.outputs.CACHE_KEY_WRAPPER_BASE }}
      DOCKER_IMG_NAME_POOL: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_POOL }}
      DOCKER_IMG_NAME_LIBINDY: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_LIBINDY }}
      DOCKER_IMG_NAME_WRAPPER_BASE: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_WRAPPER_BASE }}
      DOCKER_IMG_NAME_ANDROID: ${{ steps.mainstep.outputs.DOCKER_IMG_NAME_ANDROID }}
      PUBLISH_VERSION: ${{ steps.mainstep.outputs.PUBLISH_VERSION }}
      RELEASE: ${{ steps.mainstep.outputs.RELEASE }}
      PRERELEASE: ${{ steps.mainstep.outputs.PRERELEASE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VER }}
      - name: Set outputs
        id: mainstep
        run: |
          if [[ -z "$GITHUB_HEAD_REF" ]]; then # is set only if pipeline run is triggered as pull request
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Push"
          else
            BRANCH_NAME=$GITHUB_HEAD_REF
            echo "Setting BRANCH_NAME=$BRANCH_NAME because this pipeline is run as Pull Request"
          fi

          BRANCH_NAME=`echo $BRANCH_NAME | sed "s/[^[:alnum:]-]//g" | tr '[:upper:]' '[:lower:]'` # lowercase, only alphanumeric and dash

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR Labels: ${{ toJson(github.event.pull_request.labels.*.name) }}"

            REPO_HEAD="${{ github.event.pull_request.head.repo.full_name }}" # source repository
            REPO_BASE="${{ github.event.pull_request.head.base.full_name }}" # target repository
            echo "This is pull request from $REPO_HEAD to $REPO_BASE"

            if [[ "$REPO_HEAD" == "${{ github.repository }}" ]]; then
              echo "This CI run is PR from non-forked repository."
              IS_FORK="false";
            else
              echo "This is fork."
              IS_FORK="true";
            fi;
          else
            echo "Not PR so this is not fork."
            IS_FORK="false";
          fi;

          REPO_VERSION_MOST_RECENT=$(git describe --tags $(git rev-list --tags --max-count=1))
          REPO_VERSION_MOST_RECENT=${REPO_VERSION_MOST_RECENT:1} # The tags start as v1.2.3
          REPO_VERSION_DESIRED=$(cargo pkgid --manifest-path libindy/Cargo.toml | cut -d# -f2 | cut -d: -f2)
          echo "Highest released version was: $REPO_VERSION_MOST_RECENT, desired version (specified in libindy/Cargo.toml) is $REPO_VERSION_DESIRED"

          RELEASE="false"
          PRERELEASE="false"

          if [[ "$IS_FORK" == "false" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              if [[ "${{ contains(github.event.pull_request.labels.*.name, 'pre-release') }}" == "true" ]]; then
                PRERELEASE="true"
              fi;
            elif [[ "${{ github.event_name }}" == "push" ]]; then
              if [[ "$BRANCH_NAME" == "master" && "$REPO_VERSION_DESIRED" != "$REPO_VERSION_MOST_RECENT" ]]; then
                PUBLISH_VERSION="$REPO_VERSION_DESIRED"
                RELEASE="true"
                echo "This is push to master, and version was bumped from $REPO_VERSION_MOST_RECENT to $REPO_VERSION_DESIRED. Will publish a release of $REPO_VERSION_DESIRED."
              fi;
            fi;

            if [[ -z "$PUBLISH_VERSION" ]]; then
              PUBLISH_VERSION="$REPO_VERSION_MOST_RECENT-gadev-${{ github.run_number }}" 
            fi;

            echo "CI will publish artifacts at version: $PUBLISH_VERSION"
          else
            echo "This PR is from fork, nothing will be published because the CI wouldn't be able to access repo secrets to perform publish."
            PUBLISH_VERSION=""
          fi;

          POOL_HASH=${{ hashFiles('ci/indy-pool.dockerfile') }}
          LIBINDY_SOURCE_HASH=${{ hashFiles('libindy') }}
          WRAPPERS_HASH=${{ hashFiles('wrappers')}}
          LIBNULLPAY_SOURCE_HASH=${{ hashFiles('libnullpay') }}
          POSTGRES_SOURCE_HASH=${{ hashFiles('experimental/plugins/postgres') }}
          LIBINDY_DOCKERFILE_HASH=${{ hashFiles('ci/libindy.dockerfile') }}
          JAVA_WRAPPER_HASH=${{ hashFiles('wrappers/java') }}
          WRAPPER_BASE_DOCKER_IMG_HASH=${{ hashFiles('libindy/ci/ubuntu.dockerfile') }}
          ANDROID_DOCKERFILE_HASH=${{ hashFiles('libindy/ci/android.dockerfile') }}

          LIBINDY_HASH=${LIBINDY_SOURCE_HASH:0:11}-${LIBNULLPAY_SOURCE_HASH:0:11}-${POSTGRES_SOURCE_HASH:0:11}-${LIBINDY_DOCKERFILE_HASH:0:11}
          ANDROID_HASH=${LIBINDY_SOURCE_HASH:0:21}-${JAVA_WRAPPER_HASH:0:21}-${ANDROID_DOCKERFILE_HASH:0:21}

          echo "::set-output name=PUBLISH_VERSION::$PUBLISH_VERSION"
          echo "::set-output name=RELEASE::$RELEASE"
          echo "::set-output name=PRERELEASE::$PRERELEASE"

          echo "::set-output name=CACHE_KEY_POOL::$POOL_HASH"
          echo "::set-output name=CACHE_KEY_LIBINDY::$LIBINDY_HASH"
          echo "::set-output name=CACHE_KEY_WRAPPER_BASE::$WRAPPER_BASE_DOCKER_IMG_HASH"
          echo "::set-output name=CACHE_KEY_ANDROID::$ANDROID_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_POOL::indypool:$POOL_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_LIBINDY::libindy:$LIBINDY_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_ANDROID::android:$ANDROID_HASH"
          echo "::set-output name=DOCKER_IMG_NAME_WRAPPER_BASE::wrapper-base:$WRAPPER_BASE_DOCKER_IMG_HASH"

  build-image-indypool:
    needs: workflow-setup
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_POOL: ${{ needs.workflow-setup.outputs.CACHE_KEY_POOL }}
      DOCKER_IMG_NAME_POOL: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_POOL }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image-pool
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_POOL }}

      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image-pool.outputs.cache-hit != 'true'
        run: |
          docker build -t "$DOCKER_IMG_NAME_POOL" -f ci/indy-pool.dockerfile ci
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_POOL" > /tmp/imgcache/img_indypool.rar

  build-image-libindy:
    needs: workflow-setup
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_LIBINDY: ${{ needs.workflow-setup.outputs.CACHE_KEY_LIBINDY }}
      DOCKER_IMG_NAME_LIBINDY: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBINDY }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image-libindy
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBINDY }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image-libindy.outputs.cache-hit != 'true'
        run: |
          docker build --build-arg "RUST_VER=${{ env.RUST_VER }}" \
                       -f ci/libindy.dockerfile \
                       -t "$DOCKER_IMG_NAME_LIBINDY" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_LIBINDY" > /tmp/imgcache/img_libindy.rar

  build-image-wrapper-base:
    needs: workflow-setup
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.CACHE_KEY_WRAPPER_BASE }}
      DOCKER_IMG_NAME_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_WRAPPER_BASE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Try load from cache.
        id: cache-image-wrapper-base
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_WRAPPER_BASE }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image-wrapper-base.outputs.cache-hit != 'true'
        run: |
          docker build -f libindy/ci/ubuntu.dockerfile \
                       -t "$DOCKER_IMG_NAME_WRAPPER_BASE" \
                        .
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_WRAPPER_BASE" > /tmp/imgcache/img_wrapper_base.rar

  test-libindy:
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-image-libindy]
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_LIBINDY: ${{ needs.workflow-setup.outputs.CACHE_KEY_LIBINDY }}
      CACHE_KEY_POOL: ${{ needs.workflow-setup.outputs.CACHE_KEY_POOL }}
      DOCKER_IMG_NAME_LIBINDY: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBINDY }}
      DOCKER_IMG_NAME_POOL: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_POOL }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Load indy-pool image
        id: load-cached-pool-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_POOL }}
      - name: If no cached image found
        if: steps.load-cached-pool-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_POOL"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_indypool.rar
      - name: Load libindy image cache
        id: load-cached-libindy-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBINDY }}
      - name: If no cached image found
        if: steps.load-cached-libindy-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_LIBINDY"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_libindy.rar

      - name: Run indy tests
        run: |
          docker run --rm -d --name indypool --network host $DOCKER_IMG_NAME_POOL
          docker run --rm -i --name libindy --network host $DOCKER_IMG_NAME_LIBINDY \
                              bash -c '(cd $HOME/indy-sdk/libindy && RUST_TEST_THREADS=1 cargo test --release)'

  publish-libindy-image:
    runs-on: ubuntu-16.04
    needs: [workflow-setup, build-image-libindy]
    if: needs.workflow-setup.outputs.PUBLISH_VERSION != ''
    env:
      CACHE_KEY_LIBINDY: ${{needs.workflow-setup.outputs.CACHE_KEY_LIBINDY}}
      DOCKER_IMG_NAME_LIBINDY: ${{needs.workflow-setup.outputs.DOCKER_IMG_NAME_LIBINDY}}
      PUBLISH_VERSION: ${{needs.workflow-setup.outputs.PUBLISH_VERSION}}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Load libindy image cache
        id: load-cached-libindy-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_LIBINDY }}
      - name: If no cached image found
        if: steps.load-cached-libindy-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_LIBINDY"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_libindy.rar

      - name: Verify libindy image was loaded
        run: |
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "$DOCKER_IMG_NAME_LIBINDY" || { echo "Image $DOCKER_IMG_NAME_LIBINDY was not found!" ; exit 1; }
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: docker.pkg.github.com
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish image
        run: |
          IFS=$':' read -a arr <<< $DOCKER_IMG_NAME_LIBINDY
          DOCKER_IMG_NAME_TAGLESS=${arr[0]}
          GITHUB_REPOSITORY_LOWERCASE=`echo $GITHUB_REPOSITORY | awk '{print tolower($0)}'`
          REMOTE_DOCKER_IMG_NAME_LIBINDY="docker.pkg.github.com/${GITHUB_REPOSITORY_LOWERCASE}/${DOCKER_IMG_NAME_TAGLESS}:${PUBLISH_VERSION}"
          echo "Releasing libindy docker image version $PUBLISH_VERSION, tagged $REMOTE_DOCKER_IMG_NAME_LIBINDY"
          docker tag "$DOCKER_IMG_NAME_LIBINDY" "$REMOTE_DOCKER_IMG_NAME_LIBINDY"
          docker push "$REMOTE_DOCKER_IMG_NAME_LIBINDY" || true

  publish-rust-wrapper:
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-image-libindy]
    if: needs.workflow-setup.outputs.PUBLISH_VERSION != '' 
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.CACHE_KEY_WRAPPER_BASE }}
      DOCKER_IMG_NAME_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_WRAPPER_BASE }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
      - uses: actions/checkout@v2
      # TODO: If we make the rust wrapper workspace member, we may use this action
      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --manifest-path wrappers/rust/Cargo.toml
      #     toolchain: stable
      #     override: true
      # - uses: katyo/publish-crates@v1
      #   with:
      #     path: wrappers/rust
      #     registry-token: ${{ secrets.CRATESIO_TOKEN }}
      - name: Load libindy image cache
        id: load-cached-wrapper-base-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_WRAPPER_BASE }}
      - name: If no cached image found
        if: steps.load-cached-wrapper-base-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_WRAPPER_BASE"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_wrapper_base.rar

      - name: Publish rust wrapper to crates.io
        run: |
          docker run --rm -i --name libindy $DOCKER_IMG_NAME_WRAPPER_BASE \
                              bash -c '(cd $HOME/indy-sdk/wrappers/rust/indy-sys && \
                                        cargo release --token ${{ secrets.CRATESIO_TOKEN }} --no-confirm --dry-run ${{ env.PUBLISH_VERSION }} && \
                                        cd ../src && \
                                        cargo release --token ${{ secrets.CRATESIO_TOKEN }} --no-confirm --dry-run ${{ env.PUBLISH_VERSION }})'

  build-image-android:
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-image-wrapper-base]
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_ANDROID: ${{ needs.workflow-setup.outputs.CACHE_KEY_ANDROID }}
      DOCKER_IMG_NAME_ANDROID: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_ANDROID }}
      CACHE_KEY_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.CACHE_KEY_WRAPPER_BASE }}
      DOCKER_IMG_NAME_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_WRAPPER_BASE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Load wrapper base image cache
        id: load-cached-wrapper-base-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_WRAPPER_BASE }}
      - name: If no cached image found
        if: steps.load-cached-wrapper-base-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_WRAPPER_BASE"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_wrapper_base.rar

      - name: Try load from cache.
        id: cache-image-android
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_ANDROID }}
      - name: If NOT found in cache, build and cache image.
        if: steps.cache-image-libindy.outputs.cache-hit != 'true'
        run: |
          docker build --build-arg "RUST_VER=${{ env.RUST_VER }}" \
                       --build-arg "WRAPPER_BASE_IMAGE=${{ env.DOCKER_IMG_NAME_WRAPPER_BASE }}" \
                       -f libindy/ci/android.dockerfile \
                       -t "$DOCKER_IMG_NAME_ANDROID" \
                        libindy/ci
          mkdir -p /tmp/imgcache
          docker save "$DOCKER_IMG_NAME_ANDROID" > /tmp/imgcache/img_android.rar

  test-android-wrapper:
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-image-wrapper-base, build-image-android]
    if: needs.workflow-setup.outputs.PUBLISH_VERSION != ''
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_ANDROID: ${{ needs.workflow-setup.outputs.CACHE_KEY_ANDROID }}
      DOCKER_IMG_NAME_ANDROID: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_ANDROID }}
      FULL_VERSION_NAME: libindy-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Load android wrapper image
        id: load-android-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_ANDROID }}
      - name: If no cached image found
        if: steps.load-android-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_ANDROID"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_android.rar
      - name: Run wrapper tests
        run: |
          docker run --rm -d --name indypool --network host $DOCKER_IMG_NAME_POOL
          docker run --rm -i --name  --network host $DOCKER_IMG_NAME_ANDROID \
                              bash -c '(cd $HOME/indy-sdk/libindy && ./android.test.sh arm)'

  publish-android-wrapper:
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-image-wrapper-base, build-image-android]
    if: needs.workflow-setup.outputs.PUBLISH_VERSION != ''
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_ANDROID: ${{ needs.workflow-setup.outputs.CACHE_KEY_ANDROID }}
      DOCKER_IMG_NAME_ANDROID: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_ANDROID }}
      FULL_VERSION_NAME: libindy-android-${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Load android wrapper image
        id: load-android-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_ANDROID }}
      - name: If no cached image found
        if: steps.load-android-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_ANDROID"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_android.rar
      - name: Build and publish android artifacts
        uses: ./.github/actions/publish-android
        with:
          abis: "arm arm64"
          docker-img-name: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_ANDROID }}
          full-version-name: ${{ env.FULL_VERSION_NAME }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FULL_VERSION_NAME }}
          path: /tmp/artifacts/libindy/${{ env.FULL_VERSION_NAME }}.zip

  publish-python-wrapper:
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-image-wrapper-base]
    if: needs.workflow-setup.outputs.PUBLISH_VERSION != ''
    env:
      DOCKER_BUILDKIT: 1
      CACHE_KEY_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.CACHE_KEY_WRAPPER_BASE }}
      DOCKER_IMG_NAME_WRAPPER_BASE: ${{ needs.workflow-setup.outputs.DOCKER_IMG_NAME_WRAPPER_BASE }}
      PUBLISH_VERSION: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: Load wrapper base image cache
        id: load-cached-wrapper-base-image
        uses: actions/cache@v2
        with:
          path: /tmp/imgcache
          key: ${{ env.CACHE_KEY_WRAPPER_BASE }}
      - name: If no cached image found
        if: steps.load-cached-wrapper-base-image.outputs.cache-hit != 'true'
        run: echo "ERROR == Expected to find image from cache $CACHE_KEY_WRAPPER_BASE"; exit -1
      - name: Load image from cache
        run: docker load < /tmp/imgcache/img_wrapper_base.rar
      - name: Publish Python wrapper
        run: |
          # TODO: Obtain credentials
          # docker run --rm -i --name libindy $DOCKER_IMG_NAME_WRAPPER_BASE \
          #                     bash -c '(cd $HOME/indy-sdk/wrappers/python && \
          #                     PACKAGE_VERSION=${{ env.PUBLISH_VERSION }} python3 setup.py sdist && \
          #                     python3 -m twine upload dist/* --config-file .pypirc)'

  make-release:
    runs-on: ubuntu-latest
    needs: [workflow-setup, build-image-libindy, publish-libindy-image, publish-rust-wrapper]
    if: ${{ needs.workflow-setup.outputs.RELEASE == 'true' || needs.workflow-setup.outputs.PRERELEASE == 'true' }}
    outputs:
      RELEASE_UPLOAD_URL: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Generate changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          futureRelease: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          releaseBranch: master
          pullRequests: true
          unreleased: true
          unreleasedOnly: true
          issuesWoLabels: true
          prWoLabels: true
          stripGeneratorNotice: true
          stripHeaders: false
          maxIssues: 50
          excludeLabels: duplicate,question,invalid,wontfix,changelog-excluded
          breakingLabels: backwards-incompatible,breaking
          deprecatedLabels: deprecated
          headerLabel: "# Changelog"
          breakingLabel: '### Breaking changes'
          enhancementLabel: '### Enhancements'
          bugsLabel: '### Bug fixes'
          deprecatedLabel: '###  Deprecations'
          removedLabel: '### Removals'
          securityLabel: '### Security fixes'
          issuesLabel: '### Other issues'
          prLabel: '### Other pull requests'
          addSections: '{"ci":{"prefix":"### CI changes","labels":["ci"]},"wrappers":{"prefix":"### Wrapper changes","labels":["wrappers"]}}'
          excludeTagsRegex: '^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))+)?)$'

      - name: Create a new release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          release_name: Release ${{ needs.workflow-setup.outputs.PUBLISH_VERSION }}
          body_path: ./CHANGELOG.md
          draft: ${{ needs.workflow-setup.outputs.PRERELEASE == 'true' }}
          prerelease: ${{ needs.workflow-setup.outputs.PRERELEASE == 'true' }}

